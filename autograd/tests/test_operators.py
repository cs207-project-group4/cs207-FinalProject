from autograd.blocks.trigo import sin
from autograd.variable import Variable
import numpy as np
import autograd as ad

def test_eq_forward():
    ad.set_mode('forward')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = x

    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x==y).all(),'equqlity forward failed'

   
    
    
def test_eq_reverse():
    ad.set_mode('reverse')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = x

    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x==y).all() ,'equality reverse failed'

    


def test_neq_forward():
    ad.set_mode('forward')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = Variable(data+1)

    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x!=y).all,'inequality forward failed'
    
    
def test_neq_reverse():
    ad.set_mode('reverse')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = Variable(data+1)

    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x!=y).all(),'ineq reverse failed'




def test_lt_forward():
    ad.set_mode('forward')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = Variable(data+1)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x<y).all(),'lt failed'


def test_le_forward():
    ad.set_mode('forward')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = Variable(data+1)

    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x<=y).all(),'le failed'

   

def test_gt_forward():
    ad.set_mode('forward')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data+1)
    y = Variable(data)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x>y).all(),'Data failed'

   
def test_ge_forward():
    ad.set_mode('forward')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data+1)
    y = Variable(data)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x>=y).all(),'Data failed'
    
    
def test_lt_reverse():
    ad.set_mode('reverse')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = Variable(data+1)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x<y).all(),'lt failed'


def test_le_reverse():
    ad.set_mode('reverse')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data)
    y = Variable(data+1)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x<=y).all(),'le failed'

   

def test_gt_reverse():
    ad.set_mode('reverse')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data+1)
    y = Variable(data)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x>y).all(),'Data failed'

   
def test_ge_reverse():
    ad.set_mode('reverse')
    # =============================================================================
    #   define the input variable
    # =============================================================================
    data = np.random.random(5)
    x = Variable(data+1)
    y = Variable(data)
    # =============================================================================
    #   assert data pass
    # =============================================================================
    assert (x>=y).all(),'Data failed'


   